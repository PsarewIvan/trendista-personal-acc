{"version":3,"sources":["accordion.js","filter.js","header.js","promocode.js","select.js","tabs.js","text-area.js","text-input.js"],"names":[],"mappingstBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["class ItcAccordion {\n    constructor(target, config) {\n        this._el =\n            typeof target === 'string'\n                ? document.querySelector(target)\n                : target;\n        const defaultConfig = {\n            alwaysOpen: true,\n            duration: 350,\n        };\n        this._config = Object.assign(defaultConfig, config);\n        this.addEventListener();\n    }\n\n    addEventListener() {\n        this._el.addEventListener('click', (e) => {\n            const elHeader = e.target.closest('.js-accordion-header');\n\n            if (!elHeader) {\n                return;\n            }\n            if (!this._config.alwaysOpen) {\n                const elOpenItem = this._el.querySelector(\n                    '.accordion__item_show'\n                );\n                if (elOpenItem) {\n                    elOpenItem !== elHeader.parentElement\n                        ? this.toggle(elOpenItem)\n                        : null;\n                }\n            }\n            this.toggle(elHeader.parentElement);\n        });\n    }\n\n    show(el) {\n        const elBody = el.querySelector('.accordion__body');\n        if (\n            elBody.classList.contains('collapsing') ||\n            el.classList.contains('accordion__item_show')\n        ) {\n            return;\n        }\n        elBody.style['display'] = 'block';\n        const height = elBody.offsetHeight;\n        elBody.style['height'] = 0;\n        elBody.style['overflow'] = 'hidden';\n        elBody.style['transition'] = `height ${this._config.duration}ms ease`;\n        elBody.classList.add('collapsing');\n        el.classList.add('accordion__item_slidedown');\n        elBody.offsetHeight;\n        elBody.style['height'] = `${height}px`;\n        window.setTimeout(() => {\n            elBody.classList.remove('collapsing');\n            el.classList.remove('accordion__item_slidedown');\n            elBody.classList.add('collapse');\n            el.classList.add('accordion__item_show');\n            elBody.style['display'] = '';\n            elBody.style['height'] = '';\n            elBody.style['transition'] = '';\n            elBody.style['overflow'] = '';\n        }, this._config.duration);\n    }\n\n    hide(el) {\n        const elBody = el.querySelector('.accordion__body');\n        if (\n            elBody.classList.contains('collapsing') ||\n            !el.classList.contains('accordion__item_show')\n        ) {\n            return;\n        }\n        elBody.style['height'] = `${elBody.offsetHeight}px`;\n        elBody.offsetHeight;\n        elBody.style['display'] = 'block';\n        elBody.style['height'] = 0;\n        elBody.style['overflow'] = 'hidden';\n        elBody.style['transition'] = `height ${this._config.duration}ms ease`;\n        elBody.classList.remove('collapse');\n        el.classList.remove('accordion__item_show');\n        elBody.classList.add('collapsing');\n        window.setTimeout(() => {\n            elBody.classList.remove('collapsing');\n            elBody.classList.add('collapse');\n            elBody.style['display'] = '';\n            elBody.style['height'] = '';\n            elBody.style['transition'] = '';\n            elBody.style['overflow'] = '';\n        }, this._config.duration);\n    }\n\n    toggle(el) {\n        el.classList.contains('accordion__item_show')\n            ? this.hide(el)\n            : this.show(el);\n    }\n}\n\n(() => {\n    const accordions = document.querySelectorAll('.js-accordion');\n\n    accordions.forEach((accordion) => {\n        new ItcAccordion(accordion, {\n            alwaysOpen: true,\n        });\n    });\n})();\n","(() => {\n    const filtersButton = document.querySelector('.js-filters-button');\n    const filters = document.querySelector('.js-filters');\n\n    toggleHiddenClass();\n\n    window.addEventListener('resize', toggleHiddenClass);\n\n    filtersButton?.addEventListener('click', () => {\n        filters.classList.toggle('hidden');\n    });\n\n    function toggleHiddenClass() {\n        if (!filters) return;\n\n        if (window.innerWidth < 768) {\n            filters.classList.add('hidden');\n        } else {\n            filters.classList.remove('hidden');\n        }\n    }\n})();\n","(() => {\n    let lastScrollTop = 0;\n    let isEnabled = window.innerWidth < 1200;\n    const header = document.querySelector('.js-header');\n    const scrollThreshold = 72;\n\n    function handleScroll() {\n        if (!isEnabled) return;\n\n        let scrollTop = window.scrollY || document.documentElement.scrollTop;\n\n        if (scrollTop > lastScrollTop && scrollTop > scrollThreshold) {\n            header?.classList.add('header-hide');\n        } else {\n            header?.classList.remove('header-hide');\n        }\n\n        lastScrollTop = scrollTop;\n    }\n\n    function checkScreenSize() {\n        isEnabled = window.innerWidth < 1200;\n        if (!isEnabled) {\n            header?.classList.remove('header-hide');\n        }\n    }\n\n    window.addEventListener('scroll', handleScroll);\n    window.addEventListener('resize', checkScreenSize);\n})();\n","(function () {\n    const promocodeBlocks = document.querySelectorAll('.js-promocode');\n\n    promocodeBlocks.forEach((promo) => {\n        const button = promo.querySelector('.js-promocode-link');\n        const block = promo.querySelector('.js-promocode-block');\n        const close = promo.querySelector('.js-promocode-close');\n        const input = promo.querySelector('.js-promocode-input');\n\n        button?.addEventListener('click', () => {\n            button?.classList.add('hidden');\n            block.classList.remove('hidden');\n            input?.focus();\n        });\n\n        close?.addEventListener('click', () => {\n            button?.classList.remove('hidden');\n            block.classList.add('hidden');\n        });\n    });\n})();\n","(() => {\n    const selectsWrapper = document.querySelectorAll(\n        '.js-select-component-wrapper'\n    );\n\n    selectsWrapper.forEach((selectWrapper) => {\n        const select = selectWrapper.querySelector('.js-select-component');\n        const placeholder = select?.dataset.placeholder;\n        const options = select?.querySelectorAll('option');\n        const reset = selectWrapper?.querySelector('.js-select-reset');\n\n        const dataOptions = Array.from(options).map((option) => ({\n            text: option.innerHTML,\n            value: option.value,\n        }));\n\n        const slimSelect = new SlimSelect({\n            select,\n            settings: {\n                showSearch: false,\n            },\n            data: [\n                ...(placeholder\n                    ? [{ placeholder: true, text: placeholder }]\n                    : []),\n                ...dataOptions,\n            ],\n            events: {\n                afterChange: (evt) => {\n                    const value = evt?.[0]?.value;\n\n                    if (value) {\n                        reset?.classList.remove('hidden');\n                    }\n                },\n            },\n        });\n\n        reset?.addEventListener('click', () => {\n            if (slimSelect) {\n                slimSelect.setSelected('', false);\n                reset.classList.add('hidden');\n            }\n        });\n\n        const selectDiv = selectWrapper.querySelector(\n            `div[data-id=\"${slimSelect?.settings?.id}\"]`\n        );\n        const arrow = selectWrapper.querySelector('.ss-arrow');\n\n        select?.addEventListener('change', (event) => {\n            if (dataOptions.some(({ value }) => value === event.target.value)) {\n                selectDiv.classList.add('select-component_selected');\n                // arrow?.classList.add('transparent');\n            } else {\n                selectDiv.classList.remove('select-component_selected');\n                // arrow?.classList.remove('transparent');\n            }\n        });\n    });\n})();\n","(() => {\n    const tabs = document.querySelectorAll('.js-tabs');\n\n    tabs.forEach((tabBlock) => {\n        const buttons = tabBlock?.querySelectorAll('.js-tab-button');\n        const prices = tabBlock?.querySelectorAll('.js-tab-price');\n\n        buttons?.forEach((button) => {\n            button.addEventListener('click', () => {\n                resetButtons(buttons);\n                button.classList.add('active');\n\n                prices.forEach((price) => {\n                    price.classList.add('hidden');\n\n                    if (price.dataset.id === button.dataset.id) {\n                        price.classList.remove('hidden');\n                    }\n                });\n            });\n        });\n    });\n\n    function resetButtons(elements) {\n        elements.forEach((element) => {\n            element.classList.remove('active');\n        });\n    }\n})();\n","(() => {\n    const maxLength = 1500;\n    const nodes = document.querySelectorAll('.js-text-area-node');\n\n    nodes.forEach((node) => {\n        const textarea = node.querySelector('.js-text-area');\n        const counter = node.querySelector('.js-text-area-counter');\n\n        textarea?.addEventListener('input', updateCharacterCount);\n\n        updateCharacterCount();\n\n        function updateCharacterCount() {\n            if (textarea && counter) {\n                const currentLength = textarea.value.length;\n                counter.textContent = currentLength.toString();\n            }\n        }\n    });\n})();\n","(() => {\n    const ACTIVE_CLASS = 'active';\n\n    const nodes = document.querySelectorAll('.js-text-input-node');\n\n    nodes.forEach((node) => {\n        const input = node.querySelector('.js-text-input');\n        const reset = node.querySelector('.js-text-input-reset');\n        const alert = node.querySelector('.js-text-input-alert');\n\n        if (input.value !== '') {\n            reset?.classList.add(ACTIVE_CLASS);\n        }\n\n        input?.addEventListener('blur', (event) => {\n            if (event.target.value === '') {\n                alert?.classList.add(ACTIVE_CLASS);\n            } else {\n                alert?.classList.remove(ACTIVE_CLASS);\n            }\n        });\n\n        input?.addEventListener('input', (event) => {\n            if (event.target.value === '') {\n                reset?.classList.remove(ACTIVE_CLASS);\n            } else {\n                reset?.classList.add(ACTIVE_CLASS);\n                alert?.classList.remove(ACTIVE_CLASS);\n            }\n        });\n\n        reset?.addEventListener('click', () => {\n            if (input) {\n                input.value = '';\n                reset?.classList.remove(ACTIVE_CLASS);\n            }\n        });\n    });\n})();\n"]}